---
title: "XGBoost"
format: pdf
editor: visual
---

## XGBoost on Total Data

```{r}
library(tidyverse)
library(foreach)
library(doParallel)
library(doRNG)
library(microbenchmark)
library(sf)
library(tigris)
library(caret)
set.seed("123780")
```

You can add options to executable code like this

```{r}
load("../Data/Total_data.Rdata")
##same as the RF model but with XGB
total_data2 = total_data %>% 
  mutate(geometry = st_centroid(geometry)) %>% 
  mutate(longitude = st_coordinates(geometry)[,1], 
         latitude = st_coordinates(geometry)[,2]) %>% 
  st_drop_geometry()

data = as.data.frame(total_data2)
data_split = createDataPartition(data$price_delt_adj,
                                       p = 0.8,
                                       list = FALSE)
data_train = as.data.frame(data[data_split,])
data_test = as.data.frame(data[-data_split,])


```

```{r}
source("../Functions/XGBoost_implementation.R")
compute_cluster = makeCluster(8)
registerDoParallel(compute_cluster)
xgbGrid = expand.grid(
  nrounds = c(100, 500),
  max_depth = c(2, 5, 7, 9),
  eta = c(0.1, 0.3, 0.5),
  gamma = c(0, 0.5),
  colsample_bytree = 1,
  min_child_weight = 0,
  subsample = 1
)

xgboost_train = run_XGB_model(data = data_train, xgbGrid = xgbGrid)

##Predictions

xgb_sacr_pred = xgb_prediction(model = xgboost_train, test_data = data_test)

root_mean = RMSE(xgb_sacr_pred, data_test$price_delt_adj)
mean_absolute = MAE(xgb_sacr_pred, data_test$price_delt_adj)
mean_squared = mean((xgb_sacr_pred - data_test$price_delt_adj)^2)

comparison_metrics = c(root_mean, mean_absolute, mean_squared)

stopCluster(compute_cluster)
```
