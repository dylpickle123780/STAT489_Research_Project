---
title: "GWR_Project"
format: pdf
editor: visual
---

## GWR on Total Data

```{r}
#Load
library(GWmodel)
library(tidyverse)
library(sf)
library(sp)
library(ggfortify)
load("../Data/Total_data.Rdata")


point_model_data = apartments_100k_cleaned %>% 
  select(-state) %>% 
  select(bedrooms, bathrooms, square_feet, price, longitude, latitude) %>%
  mutate(latitude = jitter(latitude), longitude = jitter(longitude)) %>% 
  st_as_sf(coords = c("longitude","latitude")) %>% 
  as_Spatial()
  
#Turning to spatial
model_data = total_data %>% 
  select(Count, bedrooms, bathrooms, square_feet, price) %>% 
  mutate(price = log(price))%>% 
  as_Spatial() 

#Selecting Bandwidth
model_bandwidth = bw.gwr(price ~ ., data = point_model_data,
                         kernel = "exponential", parallel.method = "omp")

#run model with calculated bandwidth and return model
model_gwr = gwr.basic(price ~ ., data = model_data,
                      bw = model_bandwidth, kernel = "exponential", 
                      parallel.method = "omp", parallel.arg = 8)
```


```{r}
#Source in functions for plotting
source("../Functions/GWR_implementation.R")
library(tigris)

test_data = counties() %>% 
  filter(STATEFP!="72",
         STATEFP!="02",
         STATEFP!="66",
         STATEFP!="78",
         STATEFP!="15",
         STATEFP!="60",
         STATEFP!="69")%>% 
  select(geometry) %>% 
  mutate(square_feet = mean(model_data$square_feet),
         bedrooms = median(model_data$bedrooms),
         bathrooms = median(model_data$bathrooms),
         Count = mean(model_data$Count)) %>%
  as_Spatial()


gwr_predictions = gwr.predict(model_data$price ~ ., model_data, test_data, 
            model_bandwidth, kernel = "exponential")

model_results = gwr_predictions$SDF %>% as("sf")
ggplot(model_results)+
  geom_sf(aes(fill = prediction))+
  scale_fill_gradientn(colours = terrain.colors(8))
```

